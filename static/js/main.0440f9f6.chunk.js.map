{"version":3,"sources":["components/Styles.js","components/CurrentWeather.js","components/DailyWeather.js","App.js","index.js"],"names":["Container","styled","div","CardContainer","Card","props","fontSize","width","UL","ul","Chart","CurrentWeather","weatherData","hrData","i","hr","Temp","Math","trunc","hourly","temp","WindSpeed","wind_speed","current","className","humidity","weather","main","dew_point","style","src","alt","LineChart","height","data","CartesianGrid","XAxis","dataKey","YAxis","Tooltip","Legend","Line","type","stroke","dailyWeather","chartData","day","minTemp","daily","min","maxTemp","max","map","info","key","role","position","left","marginLeft","App","useState","setWeatherData","useEffect","navigator","geolocation","getCurrentPosition","getData","a","fetch","coords","latitude","longitude","process","json","parsedWeatherData","console","log","error","textAlign","padding","alerts","display","description","timezone","DailyWeather","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0440f9f6.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    grid-template-rows: auto;\r\n    row-gap: 2rem;\r\n    text-align: center;\r\n`\r\n\r\nexport const CardContainer = styled.div`\r\n    margin-bottom: 8rem;\r\n    display: grid;\r\n    grid-template-columns: auto auto auto auto;\r\n    row-gap: 2rem;\r\n    column-gap: 2rem;\r\n\r\n    @media screen and (max-width: 1378px) {\r\n        grid-template-columns: auto auto;\r\n    }\r\n\r\n    @media screen and (max-width: 674px) {\r\n        grid-template-columns: auto;\r\n    }\r\n`\r\n\r\nexport const Card = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    width: 20rem;\r\n    font-size: ${(props) => props.fontSize};\r\n    background: rgba(0,0,0,0.5);\r\n    backdrop-filter: blur(7px);\r\n    box-shadow: 0 8px 32px 0 rgba(31,38,135,0.4);\r\n    border-radius: 20px;\r\n\r\n    @media screen and (max-width: 1378px) {\r\n        width: ${(props) => props.width};\r\n        padding: 2em;\r\n    }\r\n\r\n    @media screen and (max-width: 674px) {\r\n        grid-template-columns: auto;\r\n        padding: unset;\r\n    }\r\n`\r\n\r\nexport const UL = styled.ul`\r\n    text-align: left;\r\n    list-style: none;\r\n`\r\n\r\nexport const Chart = styled.div`\r\n    @media screen and (max-width: 1378px) {\r\n        display: none;\r\n    }\r\n`","import React from 'react'\r\nimport { Container, Card, UL, Chart } from './Styles'\r\nimport { CartesianGrid, Legend, LineChart, Tooltip, XAxis, YAxis, Line } from 'recharts'\r\n\r\nfunction CurrentWeather({ weatherData }) {\r\n\r\n    let hrData = []\r\n\r\n    if (weatherData) {\r\n        for (let i = 0; i < 48; i++) {\r\n            hrData[i] = {\r\n                hr: i,\r\n                Temp: Math.trunc(weatherData.hourly[i].temp - 273),\r\n                WindSpeed: weatherData.hourly[i].wind_speed,\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <Card fontSize=\"1.5rem\" width=\"50rem\">\r\n                    <div>\r\n                        <UL>\r\n                            <li>{weatherData ? Math.trunc(weatherData.current.temp - 273) : <span className=\"placeholder col-1\"></span>}°C</li>\r\n                            <li>Humidity: - {weatherData ? weatherData.current.humidity : <span className=\"placeholder col-1\"></span>}%</li>\r\n                            <li>Wind Speed: - {weatherData ? weatherData.current.wind_speed : <span className=\"placeholder col-1\"></span>}km/h</li>\r\n                            <li>Weather: - {weatherData ? weatherData.current.weather[0].main : <span className=\"placeholder col-1\"></span>}</li>\r\n                            <li>Dew Point: - {weatherData ? Math.trunc(weatherData.current.dew_point - 273) : <span className=\"placeholder col-1\"></span>}°C</li>\r\n                        </UL>\r\n                    </div>\r\n                    <div>\r\n                        {weatherData ? <img style={{ width: '5rem' }} src={`https://raw.githubusercontent.com/Shivansh-yadav13/simple-weather-app/main/src/assests/images/${weatherData.current.weather[0].main}.png`} alt=\"\" /> : \"\"}\r\n                    </div>\r\n                </Card>\r\n                <Chart>\r\n                    <LineChart width={1000} height={300} data={hrData}>\r\n                        <CartesianGrid></CartesianGrid>\r\n                        <XAxis dataKey=\"hr\"></XAxis>\r\n                        <YAxis></YAxis>\r\n                        <Tooltip></Tooltip>\r\n                        <Legend></Legend>\r\n                        <Line type=\"monotone\" dataKey=\"Temp\" stroke=\"red\"></Line>\r\n                        <Line type=\"monotone\" dataKey=\"WindSpeed\" stroke=\"blue\"></Line>\r\n                    </LineChart>\r\n                </Chart>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default CurrentWeather","import React from 'react'\r\nimport { Container, CardContainer, Card, UL } from './Styles'\r\n\r\nfunction dailyWeather({ weatherData }) {\r\n\r\n    let chartData = []\r\n\r\n    if (weatherData) {\r\n        for (let i = 0; i < 8; i++) {\r\n            chartData[i] = {\r\n                day: i + 1,\r\n                minTemp: Math.trunc(weatherData.daily[i].temp.min - 273),\r\n                maxTemp: Math.trunc(weatherData.daily[i].temp.max - 273),\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <p className=\"heading\">Daily Weather ☀</p>\r\n            <Container>\r\n                <CardContainer>\r\n                    {weatherData ? weatherData.daily.map((info, key) => {\r\n                        return (\r\n                            <Card>\r\n                                <div>\r\n                                    <h5>Day-{key + 1}</h5>\r\n                                    <UL>\r\n                                        <li>Min Temp: - {Math.trunc(info.temp.min - 273)}°C</li>\r\n                                        <li>Max Temp: - {Math.trunc(info.temp.max - 273)}°C</li>\r\n                                        <li>Humidity: - {info.humidity}%</li>\r\n                                        <li>Wind Speed: - {info.wind_speed} km/h</li>\r\n                                        <li>Weather: - {info.weather[0].main}</li>\r\n                                    </UL>\r\n                                </div>\r\n                                <div>\r\n                                    <img style={{ width: '4rem' }} src={`https://raw.githubusercontent.com/Shivansh-yadav13/simple-weather-app/main/src/assests/images/${info.weather[0].main}.png`} className=\"card-img-top\" alt=\"...\" />\r\n                                </div>\r\n                            </Card>\r\n                        )\r\n                    }) : <div className=\"spinner-border text-primary\" role=\"status\" style={{ position: 'relative', left: '100%', marginLeft: '16rem' }}>\r\n                        <span className=\"visually-hidden\">Loading...</span>\r\n                    </div>}\r\n                </CardContainer>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default dailyWeather","import React, { useState, useEffect } from 'react'\r\nimport './App.css'\r\n\r\nimport CurrentWeather from './components/CurrentWeather'\r\nimport DailyWeather from './components/DailyWeather'\r\n\r\nfunction App() {\r\n  const [weatherData, setWeatherData] = useState()\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const getData = async () => {\r\n        const weatherData = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${position.coords.latitude ? position.coords.latitude : \"43\"}&lon=${position.coords.longitude ? position.coords.longitude : \"-75\"}&exclude={part}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\r\n        const parsedWeatherData = await weatherData.json()\r\n        setWeatherData(parsedWeatherData)\r\n        console.log(parsedWeatherData)\r\n      }\r\n      getData()\r\n    }, (error) => {\r\n      console.log(error)\r\n    })\r\n  }, [])\r\n  return (\r\n    <div style={{textAlign: 'center'}}>\r\n      <h1 style={{fontSize: '5rem', padding: '2rem'}} >Simple Weather App 🌤</h1>\r\n      <div className=\"alert alert-danger\" role=\"alert\" style={weatherData ? (weatherData.alerts ? { display: \"unset\" } : { display: \"none\" }) : { display: \"none\" }}>\r\n        {weatherData ? (weatherData.alerts ? weatherData.alerts[0].description : \"\") : \"\"}\r\n      </div>\r\n      {weatherData ? <h5>Region: {weatherData.timezone}</h5> : <h5>Region: Finding you...</h5>}\r\n      <CurrentWeather weatherData={weatherData} />\r\n      <DailyWeather weatherData={weatherData} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}