{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","weatherData","setWeatherData","useEffect","navigator","geolocation","getCurrentPosition","position","console","log","coords","getData","a","fetch","latitude","longitude","json","parsedWeatherData","error","className","timezone","Math","trunc","current","temp","humidity","wind_speed","weather","main","daily","map","info","key","min","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAoDeA,MAjDf,WACE,MAAsCC,qBAAtC,mBAAOC,EAAP,KAAoBC,EAApB,KAiBA,OAfAC,qBAAU,WACRC,UAAUC,YAAYC,oBAAmB,SAACC,GACxCC,QAAQC,IAAIF,EAASG,QACrB,IAAMC,EAAO,uCAAG,8BAAAC,EAAA,sEACYC,MAAM,uDAAD,OAAwDN,EAASG,OAAOI,SAAWP,EAASG,OAAOI,SAAW,KAA9G,gBAA0HP,EAASG,OAAOK,UAAYR,EAASG,OAAOK,UAAY,MAAlL,0CADjB,cACRd,EADQ,gBAEkBA,EAAYe,OAF9B,OAERC,EAFQ,OAGdT,QAAQC,IAAIQ,GACZf,EAAee,GAJD,2CAAH,qDAMbN,OACC,SAACO,GACFV,QAAQC,IAAIS,QAGb,IAED,sBAAKC,UAAU,WAAf,UACE,mBAAGA,UAAU,eAAb,gCACA,oBAAGA,UAAU,SAAb,qBAAgClB,EAAcA,EAAYmB,SAAW,MACrE,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,UAAb,6BAEA,oBAAGA,UAAU,OAAb,2BAAmClB,EAAcoB,KAAKC,MAAMrB,EAAYsB,QAAQC,KAAO,KAAO,GAA9F,WACA,oBAAGL,UAAU,OAAb,wBAAgClB,EAAcA,EAAYsB,QAAQE,SAAW,GAA7E,OACA,oBAAGN,UAAU,OAAb,0BAAkClB,EAAcA,EAAYsB,QAAQG,WAAa,GAAjF,UACA,oBAAGP,UAAU,OAAb,uBAA+BlB,EAAcA,EAAYsB,QAAQI,QAAQ,GAAGC,KAAM,SAEpF,mBAAGT,UAAU,UAAb,2BACA,qBAAKA,UAAU,gBAAf,SACGlB,EAAcA,EAAY4B,MAAMC,KAAI,SAACC,EAAMC,GAC1C,OACE,sBAAKb,UAAU,UAAf,UACE,oBAAGA,UAAU,SAAb,iBAA2Ba,EAAI,KAC/B,oBAAGb,UAAU,SAAb,wBAAmCE,KAAKC,MAAMS,EAAKP,KAAKS,IAAI,KAA5D,WACA,oBAAGd,UAAU,SAAb,wBAAmCE,KAAKC,MAAMS,EAAKP,KAAKU,IAAI,KAA5D,WACA,oBAAGf,UAAU,SAAb,wBAAmCY,EAAKN,SAAxC,OACA,oBAAGN,UAAU,SAAb,0BAAqCY,EAAKL,WAA1C,WACA,oBAAGP,UAAU,SAAb,uBAAkCY,EAAKJ,QAAQ,GAAGC,UANtBI,MAS7B,SClCEG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a6e73d34.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\n\nfunction App() {\n  const [weatherData, setWeatherData] = useState()\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      console.log(position.coords)\n      const getData = async () => {\n        const weatherData = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${position.coords.latitude ? position.coords.latitude : \"43\"}&lon=${position.coords.longitude ? position.coords.longitude : \"-75\"}&exclude={part}&appid=WEATHER_API_KEY`)\n        const parsedWeatherData = await weatherData.json()\n        console.log(parsedWeatherData)\n        setWeatherData(parsedWeatherData)\n      }\n      getData()\n    }, (error) => {\n      console.log(error)\n    })\n\n  }, [])\n  return (\n    <div className=\"main-div\">\n      <p className=\"main-heading\">Simple Weather App</p>\n      <p className=\"region\" >Region: {weatherData ? weatherData.timezone : \"\"}</p>\n      <div className=\"current-weather\">\n        <p className=\"heading\">Current Weather</p>\n        {/* <p className=\"w-el\">Time:- {weatherData ? Math.trunc((weatherData.timezone_offset / 60) / 100) : \"\"}:{weatherData ? (weatherData.timezone_offset / 60) % 100 : \"\"}</p> */}\n        <p className=\"w-el\">Temperature:- {weatherData ? Math.trunc(weatherData.current.temp - 273) : \"\"}°C</p>\n        <p className=\"w-el\">Humidity:- {weatherData ? weatherData.current.humidity : \"\"}%</p>\n        <p className=\"w-el\">Wind Speed:- {weatherData ? weatherData.current.wind_speed : \"\"}km/h</p>\n        <p className=\"w-el\">Weather:- {weatherData ? weatherData.current.weather[0].main: \"\"}</p>\n      </div>\n      <p className=\"heading\">Daily Weather</p>\n      <div className=\"daily-weather\">\n        {weatherData ? weatherData.daily.map((info, key) => {\n          return (\n            <div className=\"day-div\" key={key}>\n              <p className=\"header\">Day-{key+1}</p>\n              <p className=\"w-el-d\" >Min Temp:- {Math.trunc(info.temp.min-273)}°C</p>\n              <p className=\"w-el-d\" >Max Temp:- {Math.trunc(info.temp.max-273)}°C</p>\n              <p className=\"w-el-d\" >Humidity:- {info.humidity}%</p>\n              <p className=\"w-el-d\" >Wind Speed:- {info.wind_speed} km/h</p>\n              <p className=\"w-el-d\" >Weather:- {info.weather[0].main}</p>\n            </div>\n          )\n        }) : \"\"}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}